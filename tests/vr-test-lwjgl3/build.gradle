/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

project.ext.mainClassName = "com.badlogic.gdx.vr.tests.DesktopLauncher"
project.ext.assetsDir = new File("../vr-test-android/assets");

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile project(":tests:vr-test")
    compile project(":gdx-vr-lwjgl3")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

    // Temporary bindings until libgdx is built with lwjgl 3.1.2
    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
    runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
    runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task launchTestLwjgl3(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        // Required to run lwjgl java apps on Mac OSX
        jvmArgs = ["-XstartOnFirstThread"]
    }
}
configure(launchTestLwjgl3) {
    group "tests"
    description = "Run the Lwjgl3 test"
}

task launchTestApartmentVR(dependsOn: classes, type: JavaExec) {
    main = "com.badlogic.gdx.vr.tests.ApartmentVR"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        // Required to run lwjgl java apps on Mac OSX
        jvmArgs = ["-XstartOnFirstThread"]
    }
}
configure(launchTestApartmentVR) {
    group "tests"
    description = "Run the ApartmentVR test"
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-lwjgl3"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/vr-test-android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets']);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}